https://leetcode.com/problems/merge-intervals/description/

TC = O(NlogN)
SC = O(1)

C++

      vector<vector<int>> mergeOverlappingIntervals(vector<vector<int>> &arr) {
          int n = arr.size();
          sort(arr.begin(), arr.end());
          vector<vector<int>> ans;
          for (int i = 0; i < n; i++) {
              if (ans.empty() || arr[i][0] > ans.back()[1]) {
                  ans.push_back(arr[i]);
              }
              else {
                  ans.back()[1] = max(ans.back()[1], arr[i][1]);
              }
          }
          return ans;
      }

JAVA
          public int[][] merge(int[][] intervals) {
              int n = intervals.length;
              Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
              List<int[]> merged = new ArrayList<>();
      
              for (int i = 0; i < n; i++) {
                  if (merged.isEmpty() || intervals[i][0] > merged.get(merged.size() - 1)[1]) {
                      merged.add(intervals[i]);
                  } else {
                      merged.get(merged.size() - 1)[1] = Math.max(merged.get(merged.size() - 1)[1], intervals[i][1]);
                  }
              }
              return merged.toArray(new int[merged.size()][]);
          }
