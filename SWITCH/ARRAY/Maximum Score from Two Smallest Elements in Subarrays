https://www.geeksforgeeks.org/problems/max-sum-in-sub-arrays0824/0

TC - O(N)
SC - O(1)

LOGIC
This logic explains why we are guaranteed to find the maximum sum of the smallest and second smallest elements in an array by only examining subarrays of length two, even when the elements are negative.
1. **Goal**:
   - We want to find the smallest (`X`) and second smallest (`Y`) elements in any subarray and calculate their sum `X + Y`.

2. **Neighbors Case**:
   - If `X` and `Y` are adjacent, a subarray of length two will contain them, allowing us to compute their sum directly.

3. **Non-Neighbors Case**:
   - If `X` and `Y` are not adjacent and there are elements `Z0, Z1, ..., Zn` between them, those intermediate elements must be greater than or equal to both `X` and `Y`
     to keep 'X' and 'Y' the smallest and second smallest.

4. **Contradiction**:
   - If any intermediate element `Zi` is larger than either `X` or `Y`, we can form a new subarray that includes `Zi` and one of its neighbors, yielding a larger sum than `X + Y`, leading to a contradiction.

5. **Conclusion**:
   - Therefore, regardless of the sign of the numbers (positive or negative), we can always find a subarray of length two that gives the maximum sum of the two smallest elements.

This ensures that the algorithm correctly identifies the maximum possible sum of the two smallest elements by focusing only on subarrays of length two.

C++
    int pairWithMaxSum(vector<int> &arr) {
        int maxSum=INT_MIN;
        int sum=0;
        for(int i=0;i<arr.size()-1;i++){
            sum=0;
            sum=arr[i]+arr[i+1];
            maxSum=max(sum,maxSum);
        }
        return maxSum;
    }

JAVA
    public int pairWithMaxSum(List<Integer> arr) {
        int max=0;
        for(int i=0;i<arr.size()-1;i++){
            int sum=arr.get(i)+arr.get(i+1);
            max=Math.max(sum,max);
        }return max;
    }




