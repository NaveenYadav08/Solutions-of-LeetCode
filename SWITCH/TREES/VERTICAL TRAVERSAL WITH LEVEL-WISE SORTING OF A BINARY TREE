https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/

## Overall Complexity:

Let H be the height of the tree:

1. **BFS Traversal**: O(N).

2. **Map Insertions**: O(N log K ⋅ log M), where:
   - K is the number of unique columns (at most N).
   - M is the number of nodes per column-row (at most N).
   - Thus, log K ≤ log N and log M ≤ log N, giving O(N log² N) in the worst case.

3. **Result Construction**: O(N).

### Final Time Complexity:

The overall time complexity is:  
O(N log² N)


class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        // Map to store nodes grouped by column and row: {column -> {row -> multiset of values}}
        //  ⭐ multiset bcz values can repeat
        map<int, map<int, multiset<int>>> columnMap;
        // Queue for BFS traversal: {TreeNode*, {column, row}}
        queue<pair<TreeNode*, pair<int, int>>> traversalQueue;
        // Result vector
        vector<vector<int>> result;

        if (root == nullptr) {
            return result;
        }

        // Initialize BFS
        traversalQueue.push({root, {0, 0}});

        // Perform BFS
        while (!traversalQueue.empty()) {
            auto current = traversalQueue.front();
            traversalQueue.pop();

            TreeNode* currentNode = current.first;
            int column = current.second.first;
            int row = current.second.second;

            // Insert current node's value into the map
            columnMap[column][row].insert(currentNode->val);

            // Add left and right children to the queue with updated positions
            if (currentNode->left != nullptr) {
                traversalQueue.push({currentNode->left, {column - 1, row + 1}});
            }
            if (currentNode->right != nullptr) {
                traversalQueue.push({currentNode->right, {column + 1, row + 1}});
            }
        }

        // Build the result from the columnMap
        for (auto& columnEntry : columnMap) {
            vector<int> temp;
            for (auto& rowEntry : columnEntry.second) {
                const multiset<int>& values = rowEntry.second;
                for (int value : values) {
                    temp.push_back(value);
                }
            }
            result.push_back(temp);
        }

        return result;
    }
};
