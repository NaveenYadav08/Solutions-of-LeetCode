// LINK  https://www.interviewbit.com/problems/kth-row-of-pascals-triangle/


Efficient Approach: 
Follow the steps below to optimize the above approach:

we will just generate only the numbers of the Nth row.
We can observe that the Nth row of the Pascals triangle consists of following sequence:
NC0, NC1, ......, NCN - 1, NCN
Since, NC0 = 1, the following values of the sequence can be generated by the following equation:
NCr = (NCr - 1 * (N - r + 1)) / r where 1 ≤ r ≤ N



#include <bits/stdc++.h>
using namespace std;

// Function to find the elements
// of rowIndex in Pascal's Triangle
vector<int> getRow(int rowIndex)
{
	vector<int> currow;
	
	// 1st element of every row is 1
	currow.push_back(1);
	
	// Check if the row that has to
	// be returned is the first row
	if (rowIndex == 0)
	{
		return currow;
	}
	
	// Generate the previous row
	vector<int> prev = getRow(rowIndex - 1);

	for(int i = 1; i < prev.size(); i++)
	{
		
		// Generate the elements
		// of the current row
		// by the help of the
		// previous row
		int curr = prev[i - 1] + prev[i];
		currow.push_back(curr);
	}
	currow.push_back(1);
	
	// Return the row
	return currow;
}

int main()
{
	int n = 3;
	vector<int> arr = getRow(n);

	for(int i = 0; i < arr.size(); i++)
	{
		if (i == arr.size() - 1)
			cout << arr[i];
		else
			cout << arr[i] << ", ";
	}
	return 0;
}


